
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Customer
  @join__type(graph: BIGCOMMERCE, key: "entityId")
{
  entityId: Int
  customerGroupId: Int
  email: String
  taxExemptCategory: String
}

type Data
  @join__type(graph: BIGCOMMERCE)
{
  login: LoginResult!
}

type Errors
  @join__type(graph: BIGCOMMERCE)
{
  message: String
}

scalar join__FieldSet

enum join__Graph {
  BIGCOMMERCE @join__graph(name: "bigcommerce", url: "http://localhost:4001/")
  CUSTOMERS @join__graph(name: "customers", url: "http://localhost:4002/")
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4003/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LoginResult
  @join__type(graph: BIGCOMMERCE)
{
  """Deprecated BIGC GQL endpoint, replace with Customer node"""
  result: String!
  customer: Customer
}

type Query
  @join__type(graph: BIGCOMMERCE)
  @join__type(graph: CUSTOMERS)
  @join__type(graph: PRODUCTS)
{
  """BigCommerce customer login"""
  BigCommerceLogin(email: String!, pass: String!): LoginResult @join__field(graph: BIGCOMMERCE)
}

type result
  @join__type(graph: BIGCOMMERCE)
{
  data: Data
  errors: Errors
}