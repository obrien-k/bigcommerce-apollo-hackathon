
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type admin
  @join__type(graph: ADMIN, key: "id")
{
  id: ID!
  role: String!
}

scalar join__FieldSet

enum join__Graph {
  ADMIN @join__graph(name: "admin", url: "http://localhost:4001/")
  CHECKOUT @join__graph(name: "checkout", url: "http://localhost:4002/")
  PRODUCT @join__graph(name: "product", url: "http://localhost:4003/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: ADMIN)
  @join__type(graph: CHECKOUT)
  @join__type(graph: PRODUCT)
{
  """Returns all admin"""
  admin: [admin] @join__field(graph: ADMIN)

  """Find one admin based on ID"""
  adminById(id: ID!): admin @join__field(graph: ADMIN)
}