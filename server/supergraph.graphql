
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type BigCommerceLoginData
  @join__type(graph: STOREFRONT)
{
  site: products
}

type BigCommerceLoginResult
  @join__type(graph: STOREFRONT)
{
  data: BigCommerceLoginData!
  errors: Errors
}

type edges
  @join__type(graph: STOREFRONT)
{
  cursor: String
  node: node
}

type Errors
  @join__type(graph: STOREFRONT)
{
  message: String
}

scalar join__FieldSet

enum join__Graph {
  CUSTOMERS @join__graph(name: "customers", url: "http://localhost:4002/")
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4003/")
  STORELOGS @join__graph(name: "storeLogs", url: "http://localhost:4009/")
  STOREFRONT @join__graph(name: "storefront", url: "http://localhost:4001/")
}

type Link
  @join__type(graph: STORELOGS)
{
  current: String!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Meta
  @join__type(graph: STORELOGS)
{
  pagination: Pagination
}

type node
  @join__type(graph: STOREFRONT)
{
  entityId: ID
  name: String
}

type pageInfo
  @join__type(graph: STOREFRONT)
{
  startCursor: String
  endCursor: String
}

type Pagination
  @join__type(graph: STORELOGS)
{
  total: Int
  count: Int
  per_page: Int
  current_page: Int
  total_pages: Int
  links: Link
}

type Product
  @join__type(graph: PRODUCTS)
{
  id: ID
  name: String
}

type products
  @join__type(graph: STOREFRONT)
{
  pageInfo: pageInfo
  edges: edges
}

type ProductsResult
  @join__type(graph: PRODUCTS)
{
  data: [Product]
}

type Query
  @join__type(graph: CUSTOMERS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: STORELOGS)
  @join__type(graph: STOREFRONT)
{
  """BigCommerce Products"""
  Products: ProductsResult @join__field(graph: PRODUCTS)

  """BigCommerce Store Logs"""
  SystemLogs: SystemLogsResult @join__field(graph: STORELOGS)

  """BigCommerce Storefront API Token generator"""
  StorefrontToken: StorefrontTokenResult! @join__field(graph: STOREFRONT)

  """BigCommerce Login test"""
  BigCommerceLogin: BigCommerceLoginResult @join__field(graph: STOREFRONT)
}

type StorefrontTokenData
  @join__type(graph: STOREFRONT, key: "token")
{
  token: String!
}

type StorefrontTokenResult
  @join__type(graph: STOREFRONT)
{
  data: StorefrontTokenData!
  errors: Errors
}

type SystemLogs
  @join__type(graph: STORELOGS)
{
  id: ID
  type: String
  module: String
  severity: String
  summary: String
  message: String
  date_created: String
}

type SystemLogsResult
  @join__type(graph: STORELOGS)
{
  data: [SystemLogs]
  meta: Meta
}